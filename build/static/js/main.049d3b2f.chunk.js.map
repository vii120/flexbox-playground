{"version":3,"sources":["Components/RadioBtn.js","Components/Flexbox.js","Main.js","serviceWorker.js","index.js"],"names":["RadioBtn","props","this","list","value","onChange","name","className","length","map","item","key","htmlFor","type","id","checked","text","Component","Flexbox","classList","join","Array","apply","MainPage","setVal","attr","val","newVal","state","valRecord","Number","setState","setClass","convertList","dirVal","wrapVal","jcVal","aiVal","acVal","Object","keys","reduce","pre","el","attrList","concat","class","initVal","e","preventDefault","dirList","wrapList","jcList","aiList","acList","radioContent","title","btnName","valName","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OA6BeA,E,YA1BX,WAAYC,GAAQ,qEACVA,I,sEAEA,IAAD,EACmCC,KAAKD,MAArCE,EADH,EACGA,KAAMC,EADT,EACSA,MAAOC,EADhB,EACgBA,SAAUC,EAD1B,EAC0BA,KAC/B,OACI,yBAAKC,UAAU,cACRJ,EAAKK,QAAUL,EAAKM,KAAI,SAACC,EAAMC,GAAP,OACvB,2BAAOC,QAAO,UAAKN,EAAL,YAAaK,GAAOA,IAAKA,EACnCJ,UAAWI,IAAQP,EAAQ,UAAY,IACvC,2BACIS,KAAK,QACLP,KAAMA,EACNQ,GAAE,UAAKR,EAAL,YAAaK,GACfP,MAAOO,EACPI,QAASJ,IAAQP,EACjBC,SAAUA,IAEbK,EAAKM,c,GAnBPC,aCgBRC,E,YAfX,WAAYjB,GAAQ,qEACVA,I,sEAEA,IACEkB,EAAcjB,KAAKD,MAAnBkB,UACR,OACI,yBAAKZ,UAAS,4BAAuBY,EAAUC,KAAK,OAC/CC,MAAMC,MAAM,KAAMD,MAAM,KAAKZ,KAAI,SAACC,EAAMC,GAAP,OAC9B,yBAAKJ,UAAU,UAAUI,IAAKA,GAAMA,EAAI,W,GATtCM,a,6jBC4GPM,E,YA1GX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KA6CVuB,OAAS,SAACC,EAAMC,GACZ,IAAMC,EAAM,KAAQ,EAAKC,MAAMC,WAC/BF,EAAOF,GAAQK,OAAOJ,GACtB,EAAKK,SAAS,CAAEF,UAAWF,KAjDZ,EAoDnBK,SAAW,WAAO,IACNH,EAAc,EAAKD,MAAnBC,UAEFI,EAAc,CAChBC,OAAQ,UACRC,QAAS,WACTC,MAAO,SACPC,MAAO,SACPC,MAAO,UAQX,OANkBC,OAAOC,KAAKX,GAAWY,QAAO,SAACC,EAAKC,GAClD,GAAMd,EAAUc,IAAOV,EAAYU,GAAK,CACpC,IAAMC,EAAW,EAAKhB,MAAMK,EAAYU,IACxC,OAAOD,EAAIG,OAAOD,EAASf,EAAUc,IAAKG,OACvC,OAAOJ,IACf,KAnEY,EAuEnBK,QAAU,SAACC,GACHA,GAAKA,EAAEC,iBACX,IAAMtB,EAAM,KAAQ,EAAKC,MAAMC,WAC/BU,OAAOC,KAAKb,GAAQlB,KAAI,SAAAC,GAAI,OAAIiB,EAAOjB,GAAQ,KAC/C,EAAKqB,SAAS,CAAEF,UAAWF,KAzE3B,EAAKC,MAAQ,CAETsB,QAAS,CACL,CAAElC,KAAM,MAAO8B,MAAO,IACtB,CAAE9B,KAAM,SAAU8B,MAAO,eACzB,CAAE9B,KAAM,cAAe8B,MAAO,oBAC9B,CAAE9B,KAAM,iBAAkB8B,MAAO,wBACrCK,SAAU,CACN,CAAEnC,KAAM,SAAU8B,MAAO,IACzB,CAAE9B,KAAM,OAAQ8B,MAAO,aACvB,CAAE9B,KAAM,eAAgB8B,MAAO,sBACnCM,OAAQ,CACJ,CAAEpC,KAAM,aAAc8B,MAAO,IAC7B,CAAE9B,KAAM,WAAY8B,MAAO,uBAC3B,CAAE9B,KAAM,SAAU8B,MAAO,0BACzB,CAAE9B,KAAM,gBAAiB8B,MAAO,2BAChC,CAAE9B,KAAM,eAAgB8B,MAAO,2BACnCO,OAAQ,CACJ,CAAErC,KAAM,aAAc8B,MAAO,IAC7B,CAAE9B,KAAM,WAAY8B,MAAO,mBAC3B,CAAE9B,KAAM,SAAU8B,MAAO,sBACzB,CAAE9B,KAAM,WAAY8B,MAAO,wBAC3B,CAAE9B,KAAM,UAAW8B,MAAO,wBAC9BQ,OAAQ,CACJ,CAAEtC,KAAM,aAAc8B,MAAO,IAC7B,CAAE9B,KAAM,WAAY8B,MAAO,qBAC3B,CAAE9B,KAAM,SAAU8B,MAAO,wBACzB,CAAE9B,KAAM,gBAAiB8B,MAAO,yBAChC,CAAE9B,KAAM,eAAgB8B,MAAO,wBAC/B,CAAE9B,KAAM,UAAW8B,MAAO,0BAK9BjB,UAAW,CACPK,OAAQ,EACRC,QAAS,EACTC,MAAO,EACPC,MAAO,EACPC,MAAO,IAzCA,E,sEA6ET,IAAD,SAC4DpC,KAAK0B,MAA9DC,EADH,EACGA,UAAWqB,EADd,EACcA,QAASC,EADvB,EACuBA,SAAUC,EADjC,EACiCA,OAAQC,EADzC,EACyCA,OAAQC,EADjD,EACiDA,OAChDC,EAAe,SAACC,EAAOC,EAAStD,EAAMuD,GAAvB,OACjB,yBAAKnD,UAAU,+BACf,0BAAMA,UAAU,yBAAyBiD,GACzC,yBAAKjD,UAAU,aACf,kBAAC,EAAD,CAAUD,KAAMmD,EACZtD,KAAMA,EACNC,MAAOyB,EAAU6B,GACjBrD,SAAU,SAAA2C,GAAC,OAAI,EAAKxB,OAAOkC,EAASV,EAAEW,OAAOvD,aAIrD,OACI,yBAAKG,UAAU,iBACVgD,EAAa,iBAAkB,SAAUL,EAAS,UAClDK,EAAa,YAAa,UAAWJ,EAAU,WAC/CI,EAAa,kBAAmB,QAASH,EAAQ,SACjDG,EAAa,cAAe,QAASF,EAAQ,SAC7CE,EAAa,gBAAiB,QAASD,EAAQ,WAC7CzB,EAAUS,QAAUT,EAAUM,SACjC,yBAAK5B,UAAU,eAAf,2CACA,4BAAQA,UAAU,8BAA8BqD,QAAS1D,KAAK6C,SAA9D,UACA,kBAAC,EAAD,CAAS5B,UAAWjB,KAAK8B,kB,GArGlBf,aCSH4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAACC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.049d3b2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass RadioBtn extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const { list, value, onChange, name } = this.props\r\n        return (\r\n            <div className=\"radioBox\">\r\n                {!!list.length && list.map((item, key) =>\r\n                    <label htmlFor={`${name}_${key}`} key={key}\r\n                        className={key === value ? 'checked' : ''}>\r\n                        <input\r\n                            type=\"radio\"\r\n                            name={name}\r\n                            id={`${name}_${key}`}\r\n                            value={key}\r\n                            checked={key === value}\r\n                            onChange={onChange}\r\n                        />\r\n                        {item.text}\r\n                    </label>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RadioBtn;","import React, { Component } from 'react';\r\n\r\nclass Flexbox extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const { classList } = this.props;\r\n        return (\r\n            <div className={`boxWrapper d-flex ${classList.join(' ')}`}>\r\n                {Array.apply(null, Array(10)).map((item, key) =>\r\n                    <div className=\"boxItem\" key={key}>{key+1}</div>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Flexbox;","import React, { Component } from 'react';\r\nimport { RadioBtn, Flexbox } from './Components'\r\n\r\nclass MainPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // 各個屬性的所有值\r\n            dirList: [\r\n                { text: 'row', class: '' },\r\n                { text: 'column', class: 'flex-column' },\r\n                { text: 'row-reverse', class: 'flex-row-reverse' },\r\n                { text: 'column-reverse', class: 'flex-column-reverse' }],\r\n            wrapList: [\r\n                { text: 'nowrap', class: '' },\r\n                { text: 'wrap', class: 'flex-wrap' },\r\n                { text: 'wrap-reverse', class: 'flex-wrap-reverse' }],\r\n            jcList: [\r\n                { text: 'flex-start', class: '' },\r\n                { text: 'flex-end', class: 'justify-content-end' },\r\n                { text: 'center', class: 'justify-content-center' },\r\n                { text: 'space-between', class: 'justify-content-between' },\r\n                { text: 'space-around', class: 'justify-content-around' }],\r\n            aiList: [\r\n                { text: 'flex-start', class: '' },\r\n                { text: 'flex-end', class: 'align-items-end' },\r\n                { text: 'center', class: 'align-items-center' },\r\n                { text: 'baseline', class: 'align-items-baseline' },\r\n                { text: 'stretch', class: 'align-items-stretch' }],\r\n            acList: [\r\n                { text: 'flex-start', class: '' },\r\n                { text: 'flex-end', class: 'align-content-end' },\r\n                { text: 'center', class: 'align-content-center' },\r\n                { text: 'space-between', class: 'align-content-between' },\r\n                { text: 'space-around', class: 'align-content-around' },\r\n                { text: 'stretch', class: 'align-content-stretch' }],\r\n            // aiList: [\r\n            //     { text: '', class: '' },\r\n            // ],\r\n            // 當前屬性值\r\n            valRecord: {\r\n                dirVal: 0,      // flex-direction\r\n                wrapVal: 0,     // flex-wrap\r\n                jcVal: 0,       // justify-content\r\n                aiVal: 0,       // align-items\r\n                acVal: 0,       // align-content\r\n            },\r\n        }\r\n    }\r\n    // 改變任何屬性\r\n    setVal = (attr, val) => {\r\n        const newVal = { ...this.state.valRecord }\r\n        newVal[attr] = Number(val)\r\n        this.setState({ valRecord: newVal });\r\n    }\r\n    // 將屬性轉成 class 名稱\r\n    setClass = () => {\r\n        const { valRecord } = this.state\r\n        // 屬性值與列表的名稱對照\r\n        const convertList = {\r\n            dirVal: 'dirList',\r\n            wrapVal: 'wrapList',\r\n            jcVal: 'jcList',\r\n            aiVal: 'aiList',\r\n            acVal: 'acList',\r\n        }\r\n        const classList = Object.keys(valRecord).reduce((pre, el) => {\r\n            if (!!valRecord[el] && convertList[el]) {\r\n                const attrList = this.state[convertList[el]]\r\n                return pre.concat(attrList[valRecord[el]].class)\r\n            } else return pre\r\n        }, [])\r\n        return classList\r\n    }\r\n    // 初始化所有值\r\n    initVal = (e) => {\r\n        if (e) { e.preventDefault() }\r\n        const newVal = { ...this.state.valRecord }\r\n        Object.keys(newVal).map(item => newVal[item] = 0)\r\n        this.setState({ valRecord: newVal });\r\n    }\r\n    render() {\r\n        const { valRecord, dirList, wrapList, jcList, aiList, acList } = this.state\r\n        const radioContent = (title, btnName, list, valName) => (\r\n            <div className=\"mb-2 row align-items-center\">\r\n            <span className=\"col-lg-2 mb-lg-0 mb-1\">{title}</span>\r\n            <div className=\"col-lg-10\">\r\n            <RadioBtn name={btnName}\r\n                list={list}\r\n                value={valRecord[valName]}\r\n                onChange={e => this.setVal(valName, e.target.value)}\r\n            /></div>\r\n        </div>\r\n        )\r\n        return (\r\n            <div className=\"container p-3\">\r\n                {radioContent('flex-direction', 'dirBtn', dirList, 'dirVal')}\r\n                {radioContent('flex-wrap', 'wrapBtn', wrapList, 'wrapVal')}\r\n                {radioContent('justify-content', 'jcBtn', jcList, 'jcVal')}\r\n                {radioContent('align-items', 'aiBtn', aiList, 'aiVal')}\r\n                {radioContent('align-content', 'acBtn', acList, 'acVal')}\r\n                {!!valRecord.acVal && !valRecord.wrapVal && \r\n                <div className=\"text-danger\">* ALIGN-CONTENT need to use with WRAP!!</div> }\r\n                <button className=\"btn btn-outline-danger my-2\" onClick={this.initVal}>reset!</button>\r\n                <Flexbox classList={this.setClass()} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './Main';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/custom.scss'\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}